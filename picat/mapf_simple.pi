module mapf_simple.
import common.
import sat.

%===================================================
% tries to find any solution. Not edge disjunct, optimizing Makespan.
%
%===================================================

run(FileIn,FileOut) =>
	println("RUN"),
	read_file_input(FileIn,Graph,As,MapArr,Opt),
	println("add reflex edge"),
	% adds to graph reflexive edges
	common.graph_add_reflex_edge(Graph,Graph1),		
	% changes graph so it is like indexed array
	common.graph_to_indexed_array(Graph1,GraphOut),
    println("BeforePath"),
	path(GraphOut,As,PathSol,Opt),	
	println("PathEnd"),

	if (PathSol != null) then
		common.get_writer(FileOut,Writer),
		common.mapf_simple_output_plan(PathSol,MapArr,Writer),
		common.close_writer(Writer)
	else 	
		println("No solution found"),	
		common.get_writer(FileOut,Writer),
		common.mapf_no_solution_found_write(Writer),
		common.close_writer(Writer)
	end.




%As je seznam dat o agentech. kazdy prvek seznamu je dvojice (Start_agenta,Cil_agenta). 
% N - number of nodes
% M Trying current length of the solution.
% K pocet agentu.


% Graph is Array, idnex is node number, value is list of neigbour index.

path(Graph,As,B,Opt) ?=>
	%mesh_size(Width,Height), 
	%N = Width*Height, % pocet vrcholu	
	N = len(Graph),
    K = len(As), % pocet agentu
	common.lower_upper_bounds(Graph,As,Opt,LB,UB),
	if (LB = 0 /\ UB = 0) then fail end,
	between(LB,UB,M),
	B = new_array(M+1,K,N), %B = (Cas,Agenty,Vrcholy)
	B :: 0 .. 1,
	%initialize the first and last states
	foreach(A in 1..K)
		(V,FV) = As[A],
		B[1,A,V] = 1, % robot ma byt na startovni pozici robota.
		B[M+1,A,FV] = 1 % robot ma byt na koncove pozici.
	end,

	%Each agent ocuppies exacly one vertex
	foreach(T in 1..M+1, A in 1..K) 
		sum([B[T,A,V]: V in 1..N]) #= 1
	end,

	%No two agents occupy the same vertex
	foreach(T in 1..M+1, V in 1..N)
		sum([B[T,A,V]: A in 1..K]) #=< 1
	end,

	%Every transition is valid
	foreach(T in 1..M,A in 1..K, V in 1..N)
		Neibs = Graph[V], 
    %neibsN(V,Neibs),
		B[T,A,V] #=>
		sum([B[T+1,A,U] : U in Neibs]) #>= 1
	end,

	solve(B).

path(_Graph,_As,B,_Opt) => B = null.


